#!/usr/bin/env ruby

if RUBY_VERSION < '2.0.0'
  abort 'error: poesie requires Ruby 2 or higher.'
end

if $0 == __FILE__
  $:.unshift File.expand_path('../lib', File.dirname(__FILE__))
end

begin
  require 'optparse'
  require 'yaml'
  require File.expand_path('../lib/poesie', File.dirname(__FILE__))
  require File.expand_path('../lib/version', File.dirname(__FILE__))
rescue LoadError => e
  abort 'error: missing some dependencies for poesie. Be sure to install it using `gem install` or to run `bundle installl` to install dependencies - ' + e.message
end

options = {
    :api_token => nil,
    :project_id => nil,
    :lang => nil,
    :localizable_strings => nil,
    :strings_xml => nil,
    :context_file => nil,
    :print_date => false,
    :substitutions => nil,
    :tags => nil
}

opts = OptionParser.new do |opts|
  opts.banner = 'Usage: poesie [options]'
  opts.on('-t API_TOKEN', '--token API_TOKEN', %q(Your POEditor API token)) do |api_token|
    options[:api_token] = api_token
  end
  opts.on('-p PROJECT_ID', '--project PROJECT_ID', %q(Your POEditor project identifier)) do |project_id|
    options[:project_id] = project_id
  end
  opts.on('-l LANGUAGE', '--lang LANGUAGE', %q(The POEditor project language code to extract)) do |lang|
    options[:lang] = lang
  end
  opts.on('-i PATH', '--ios PATH', %q(Path of the iOS Localizable.strings[dict] file to generate)) do |path|
    options[:localizable_strings] = path
  end
  opts.on('-a PATH', '--android PATH', %q(Path of the Android strings.xml file path to generate)) do |path|
    options[:strings_xml] = path
  end
  opts.on('-c PATH', '--context PATH', %q(Path of the *.json file to generate for contexts)) do |path|
    options[:context_file] = path
  end
  opts.on('-d', '--date', %q(Generate the current date in file headers)) do
    options[:print_date] = true
  end
  opts.on('-s FILE', '--subst FILE', %q(Path to a YAML file listing all substitutions)) do |path|
    Poesie.exit_with_error("The substitutions file #{path} was not found") unless File.exists?(path)
    begin
      subst = YAML.load_file(path)
    rescue Psych::SyntaxError => e
      Poesie.exit_with_error("Invalid YAML file #{e.message}")
    end
    subst = [subst] if subst.is_a?(Hash)
    valid = subst.all? { |hash| hash.keys.all? { |k| k.is_a?(String) } && hash.values.all? { |k| k.is_a?(String) } }
    Poesie.exit_with_error("The provided substitutions file #{path} should only contain a (Array of) Hashes with String keys and values") unless valid
    options[:substitutions] = subst
  end
  opts.on('-g TAGS', '--tags TAGS', %q(Comma separated list of tags used to filter exported terms)) do |tags|
    options[:tags] = tags
  end
  opts.on_tail('-h', '--help', %q(Show this message)) { puts opts; exit 1 }
  opts.on_tail('-v', '--version', 'Show version') { puts Poesie::VERSION; exit }
end

begin
  opts.parse!
rescue OptionParser::InvalidOption => error
  puts error
  puts opts
  exit 1
end

### Main ###

Poesie.exit_with_error('You need to specify your POEditor project identifier using --project option (see --help for more info)') if options[:project_id].nil?
exporter = Poesie::Exporter.new(options[:api_token], options[:project_id])
Poesie.exit_with_error('You need to specify your POEditor project language using --lang option (see --help for more info)') if options[:lang].nil?

exporter.run(options[:lang], options[:tags]) do |terms|
  Poesie::Log::title("== Language #{options[:lang]} ==")

  # iOS
  unless options[:localizable_strings].nil?
    Poesie::Log::subtitle('== iOS ==')

    # Localizable.strings
    Poesie::AppleFormatter::write_strings_file(
      terms,
      options[:localizable_strings],
      substitutions: options[:substitutions],
      print_date: options[:print_date]
    )

    # Localizable.stringsdict
    strings_dict_path = options[:localizable_strings].gsub(/\.strings$/,'.stringsdict')
    Poesie::AppleFormatter::write_stringsdict_file(
      terms,
      strings_dict_path,
      substitutions: options[:substitutions],
      print_date: options[:print_date]
    )
  end

  # Android
  unless options[:strings_xml].nil?
    Poesie::Log::subtitle('== Android ==')

    # Strings.xml
    Poesie::AndroidFormatter::write_strings_xml(
      terms,
      options[:strings_xml],
      substitutions: options[:substitutions],
      print_date: options[:print_date]
    )
  end

  # Context.json (if specified)
  if options[:context_file]
    filters = nil
    filters = Poesie::Filters::EXCLUDE_IOS if options[:localizable_strings].nil?
    filters = Poesie::Filters::EXCLUDE_ANDROID if options[:strings_xml].nil?
    Poesie::Log::subtitle("== Context ==")
    Poesie::ContextFormatter::write_context_json(terms, options[:context_file], exclude: filters)
  end
end
